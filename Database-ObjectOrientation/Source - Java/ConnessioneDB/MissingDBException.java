package ConnessioneDB;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;


public class MissingDBException extends SQLException{

	private Connection connessione;
	
	public MissingDBException(Connection connection) {
		
		Statement statement;
		
		try {
			statement = connection.createStatement();
			statement.executeUpdate("CREATE DATABASE corsidiformazione;");
			statement.close();
			
			String url = "jdbc:postgresql://localhost:5432/corsidiformazione";
			connection = DriverManager.getConnection(url,"postgres","pinodaniele");
			
			statement = connection.createStatement();
			statement.executeUpdate("\r\n"
					
					+ "--DEFINIZIONE TABELLE\r\n"
					+ "\r\n"
					+ "CREATE TABLE IF NOT EXISTS corso(\r\n"
					+ "	corso_id INTEGER PRIMARY KEY,\r\n"
					+ "	nome VARCHAR(50) NOT NULL UNIQUE,\r\n"
					+ "	descrizione VARCHAR(500) NOT NULL,\r\n"
					+ "	max_partecipanti INTEGER NOT NULL,\r\n"
					+ "	percentuale_minima_presenze INTEGER NOT NULL,\r\n"
					+ "	terminato BOOLEAN);\r\n"
					+ "	\r\n"
					+ "CREATE TABLE IF NOT EXISTS professore(\r\n"
					+ "		professore_id INTEGER PRIMARY KEY,\r\n"
					+ "		nome VARCHAR(50) NOT NULL,\r\n"
					+ "		cognome VARCHAR(50) NOT NULL);\r\n"
					+ "\r\n"
					+ "CREATE TABLE IF NOT EXISTS lezione(\r\n"
					+ "		lezione_id INTEGER PRIMARY KEY,\r\n"
					+ "		titolo VARCHAR(50) UNIQUE NOT NULL,\r\n"
					+ "		descrizione VARCHAR(500),\r\n"
					+ "		data DATE NOT NULL,\r\n"
					+ "		ora_inizio TIME NOT NULL,\r\n"
					+ "		ora_fine TIME NOT NULL,\r\n"
					+ "		professore INTEGER NOT NULL,\r\n"
					+ "		del_corso INTEGER NOT NULL);\r\n"
					+ "	\r\n"
					+ "CREATE TABLE IF NOT EXISTS macroarea(\r\n"
					+ "	nome VARCHAR(50) PRIMARY KEY);\r\n"
					+ "	\r\n"
					+ "CREATE TABLE IF NOT EXISTS area_tematica(\r\n"
					+ "	tema VARCHAR(100) NOT NULL PRIMARY KEY,\r\n"
					+ "	nome_macroarea VARCHAR(50) NOT NULL);\r\n"
					+ "\r\n"
					+ "CREATE TABLE IF NOT EXISTS appartenenza_area(\r\n"
					+ "	corso INTEGER NOT NULL,\r\n"
					+ "	tema_trattato VARCHAR(100) NOT NULL);\r\n"
					+ "	\r\n"
					+ "CREATE TABLE IF NOT EXISTS studente(\r\n"
					+ "	studente_id INTEGER PRIMARY KEY,\r\n"
					+ "	nome VARCHAR(25) NOT NULL,\r\n"
					+ "	cognome VARCHAR(25) NOT NULL,\r\n"
					+ "	data_nascita DATE NOT NULL,\r\n"
					+ "	email VARCHAR(50) UNIQUE NOT NULL,\r\n"
					+ "	telefono VARCHAR(25) UNIQUE);\r\n"
					+ "	\r\n"
					+ "CREATE TABLE IF NOT EXISTS partecipazione(\r\n"
					+ "	lezione_frequentata INTEGER NOT NULL,\r\n"
					+ "	studente_partecipante INTEGER NOT NULL);\r\n"
					+ "	\r\n"
					+ "CREATE TABLE IF NOT EXISTS parole_chiave(\r\n"
					+ "	parola VARCHAR(25) PRIMARY KEY);\r\n"
					+ "\r\n"
					+ "CREATE TABLE IF NOT EXISTS parole_lezione(\r\n"
					+ "	parola VARCHAR(25) NOT NULL,\r\n"
					+ "	lezione INTEGER NOT NULL);\r\n"
					+ "\r\n"
					+ "CREATE TABLE IF NOT EXISTS iscrizione(\r\n"
					+ "	superato BOOLEAN DEFAULT FALSE,\r\n"
					+ "	studente_iscritto INTEGER NOT NULL,\r\n"
					+ "	corso_scelto INTEGER NOT NULL);\r\n"
					+ "\r\n"
					+ "CREATE TABLE IF NOT EXISTS operatore(\r\n"
					+ "	nome_utente VARCHAR(50) PRIMARY KEY,\r\n"
					+ "	password VARCHAR(50) NOT NULL);\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "--DEFINIZIONI FOREIGN KEY\r\n"
					+ "\r\n"
					+ "ALTER TABLE area_tematica\r\n"
					+ "	ADD CONSTRAINT area_tematica_fk1 FOREIGN KEY (nome_macroarea)\r\n"
					+ "	REFERENCES macroarea(nome) ON DELETE CASCADE ON UPDATE CASCADE;\r\n"
					+ "	\r\n"
					+ "ALTER TABLE appartenenza_area\r\n"
					+ "	ADD CONSTRAINT appartenenza_area_fk1 FOREIGN KEY (corso)\r\n"
					+ "	REFERENCES corso(corso_id) ON DELETE CASCADE,\r\n"
					+ "	ADD CONSTRAINT appartenenza_area_fk2 FOREIGN KEY (tema_trattato)\r\n"
					+ "	REFERENCES area_tematica(tema) ON DELETE CASCADE ON UPDATE CASCADE;\r\n"
					+ "\r\n"
					+ "ALTER TABLE iscrizione\r\n"
					+ "	ADD CONSTRAINT iscrizione_fk1 FOREIGN KEY (studente_iscritto)\r\n"
					+ "	REFERENCES studente(studente_id) ON DELETE CASCADE ON UPDATE CASCADE,\r\n"
					+ "	ADD CONSTRAINT iscrizione_fk2 FOREIGN KEY (corso_scelto)\r\n"
					+ "	REFERENCES corso(corso_id) ON DELETE CASCADE ON UPDATE CASCADE;\r\n"
					+ "	\r\n"
					+ "ALTER TABLE partecipazione\r\n"
					+ "	ADD CONSTRAINT partecipazione_fk1 FOREIGN KEY (lezione_frequentata)\r\n"
					+ "	REFERENCES lezione(lezione_id) ON DELETE CASCADE ON UPDATE CASCADE,\r\n"
					+ "	ADD CONSTRAINT partecipazione_fk2 FOREIGN KEY (studente_partecipante)\r\n"
					+ "	REFERENCES studente(studente_id) ON DELETE CASCADE ON UPDATE CASCADE;\r\n"
					+ "	\r\n"
					+ "ALTER TABLE lezione\r\n"
					+ "	ADD CONSTRAINT lezione_fk1 FOREIGN KEY (professore)\r\n"
					+ "	REFERENCES professore(professore_id) ON DELETE CASCADE ON UPDATE CASCADE,\r\n"
					+ "	ADD CONSTRAINT lezione_fk2 FOREIGN KEY (del_corso)\r\n"
					+ "	REFERENCES corso(corso_id) ON DELETE CASCADE ON UPDATE CASCADE;\r\n"
					+ "	\r\n"
					+ "ALTER TABLE parole_lezione\r\n"
					+ "	ADD CONSTRAINT parole_lezione_fk1 FOREIGN KEY (parola)\r\n"
					+ "	REFERENCES parole_chiave(parola) ON DELETE CASCADE ON UPDATE CASCADE,\r\n"
					+ "	ADD CONSTRAINT parole_lezione_fk2 FOREIGN KEY (lezione)\r\n"
					+ "	REFERENCES lezione(lezione_id) ON DELETE CASCADE ON UPDATE CASCADE;\r\n"
					+ "\r\n"
					+ "--DEFINIZIONE VISTE\r\n"
					+ "CREATE OR REPLACE VIEW presenze (corso_id, lezione_id, titolo_lezione, conteggio) AS(\r\n"
					+ "	SELECT c.corso_id, l.lezione_id, l.titolo, count(*)\r\n"
					+ "	FROM corso c JOIN lezione l ON c.corso_id = l.del_corso JOIN partecipazione p ON l.lezione_id = p.lezione_frequentata\r\n"
					+ "	GROUP BY c.corso_id, l.lezione_id\r\n"
					+ "	ORDER BY c.corso_id);\r\n"
					+ "\r\n"
					+ "CREATE OR REPLACE VIEW insegnamenti(professore_id, corso_id) AS(\r\n"
					+ "	SELECT DISTINCT p.professore_id, c.corso_id\r\n"
					+ "	FROM professore p JOIN lezione l ON l.professore=p.professore_id JOIN corso c ON l.del_corso=c.corso_id\r\n"
					+ "	ORDER BY professore_id);\r\n"
					+ "\r\n"
					+ "--DEFINIZIONE SEQUENZE\r\n"
					+ "\r\n"
					+ "CREATE SEQUENCE sequenza_corso_id\r\n"
					+ "START 1\r\n"
					+ "INCREMENT 1\r\n"
					+ "OWNED BY corso.corso_id;\r\n"
					+ "\r\n"
					+ "CREATE SEQUENCE sequenza_lezione_id\r\n"
					+ "START 1\r\n"
					+ "INCREMENT 1\r\n"
					+ "OWNED BY lezione.lezione_id;\r\n"
					+ "\r\n"
					+ "CREATE SEQUENCE sequenza_studente_id\r\n"
					+ "START 1\r\n"
					+ "INCREMENT 1\r\n"
					+ "OWNED BY studente.studente_id;\r\n"
					+ "\r\n"
					+ "CREATE SEQUENCE sequenza_professore_id\r\n"
					+ "START 1\r\n"
					+ "INCREMENT 1\r\n"
					+ "OWNED BY professore.professore_id;\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "	\r\n"
					+ "");
			
			statement.executeUpdate("INSERT INTO operatore VALUES('admin', 'admin')");
			
			statement.executeUpdate(" --INTRARELAZIONALI\r\n"
					+ "ALTER TABLE corso\r\n"
					+ "ADD CONSTRAINT numero_partecipanti_maggiore_di_0\r\n"
					+ "CHECK (max_partecipanti>0);\r\n"
					+ "\r\n"
					+ "ALTER TABLE iscrizione\r\n"
					+ "ADD CONSTRAINT iscrizione_unique\r\n"
					+ "UNIQUE (studente_iscritto, corso_scelto);\r\n"
					+ "\r\n"
					+ "ALTER TABLE parole_lezione\r\n"
					+ "ADD CONSTRAINT parole_lezione_unique\r\n"
					+ "UNIQUE (parola,lezione);\r\n"
					+ "\r\n"
					+ "ALTER TABLE appartenenza_area\r\n"
					+ "ADD CONSTRAINT area_tematica_corso_unique\r\n"
					+ "UNIQUE (corso,tema_trattato);\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "--INTERRELAZIONALI\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "--Ad un corso terminato non si possono aggiungere lezioni \r\n"
					+ "CREATE FUNCTION check_corso_terminato_lezione() \r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "BEGIN\r\n"
					+ "	IF ((SELECT c.terminato\r\n"
					+ "		FROM lezione l JOIN corso c ON l.del_corso = c.corso_id\r\n"
					+ "		WHERE l.lezione_id = NEW.lezione_id) = TRUE)\r\n"
					+ "	THEN\r\n"
					+ "		DELETE FROM lezione WHERE lezione.lezione_id = NEW.lezione_id;\r\n"
					+ "		RAISE SQLSTATE '12300';\r\n"
					+ "		RAISE EXCEPTION 'Non puoi inserire una lezione se il corso è terminato.';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_lezioni_corso_terminato \r\n"
					+ "AFTER INSERT ON lezione \r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_corso_terminato_lezione();\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "--Ad un corso terminato non ci si può iscrivere\r\n"
					+ "CREATE FUNCTION check_corso_terminato_iscrizione()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "BEGIN \r\n"
					+ "	IF ((SELECT c.terminato\r\n"
					+ "		 FROM iscrizione i JOIN corso c ON i.corso_scelto=c.corso_id\r\n"
					+ "		 WHERE i.corso_scelto = NEW.corso_scelto AND i.studente_iscritto=NEW.studente_iscritto) = TRUE)\r\n"
					+ "	THEN\r\n"
					+ "		DELETE FROM iscrizione WHERE iscrizione.corso_scelto=NEW.corso_scelto;\r\n"
					+ "		RAISE SQLSTATE '12301';\r\n"
					+ "		RAISE EXCEPTION 'Non puoi iscrivere uno studente ad un corso terminato';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_iscrizioni_corso_terminato\r\n"
					+ "AFTER INSERT ON iscrizione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_corso_terminato_iscrizione();\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "--Uno studente non può partecipare ad una lezione di un corso terminato.\r\n"
					+ "CREATE FUNCTION check_corso_terminato_partecipazione()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "BEGIN\r\n"
					+ "	IF ((SELECT c.terminato\r\n"
					+ "	     FROM lezione l JOIN corso c ON l.del_corso=c.corso_id JOIN partecipazione p ON l.lezione_id=p.lezione_frequentata\r\n"
					+ "		 WHERE p.lezione_frequentata=NEW.lezione_frequentata AND p.studente_partecipante=NEW.studente_partecipante) = TRUE)\r\n"
					+ "	THEN\r\n"
					+ "		DELETE FROM partecipazione p WHERE p.lezione_frequentata=NEW.lezione_frequentata;\r\n"
					+ "		RAISE SQLSTATE '12302';\r\n"
					+ "		RAISE EXCEPTION 'Non puoi partecipare ad una lezione di un corso terminato';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_partecipazioni_lezione_corso_terminato\r\n"
					+ "AFTER INSERT ON partecipazione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_corso_terminato_partecipazione();\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "-- Uno studente non può partecipare ad una lezione se non è iscritto al relativo corso\r\n"
					+ "CREATE FUNCTION check_iscrizione()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "tot integer;\r\n"
					+ "BEGIN\r\n"
					+ "    SELECT count(*) INTO tot\r\n"
					+ "    FROM iscrizione i\r\n"
					+ "    WHERE i.studente_iscritto=NEW.studente_partecipante AND\r\n"
					+ "          i.corso_scelto = (SELECT c.corso_id\r\n"
					+ "                            FROM corso c JOIN lezione l ON c.corso_id=l.del_corso\r\n"
					+ "                            WHERE NEW.lezione_frequentata = l.lezione_id);\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "    IF (tot <= 0) \r\n"
					+ "    THEN\r\n"
					+ "        DELETE FROM partecipazione WHERE partecipazione.lezione_frequentata = NEW.lezione_frequentata \r\n"
					+ "                                         AND partecipazione.studente_partecipante = NEW.studente_partecipante;\r\n"
					+ "		RAISE SQLSTATE '12303';\r\n"
					+ "        RAISE EXCEPTION 'Uno studente non può partecipare ad una lezione se non è iscritto al relativo corso.';\r\n"
					+ "    END IF;\r\n"
					+ "    RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_partecipazioni_non_iscritti_corso\r\n"
					+ "AFTER INSERT ON partecipazione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_iscrizione();\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "-- Un corso non può avere più iscritti del numero massimo di partecipanti\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION check_numero_massimo_partecipanti()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE numero_iscritti INTEGER;\r\n"
					+ "BEGIN \r\n"
					+ "	SELECT COUNT(*) INTO numero_iscritti \r\n"
					+ "	FROM iscrizione i \r\n"
					+ "	WHERE i.corso_scelto=NEW.corso_scelto;\r\n"
					+ "	\r\n"
					+ "	IF (numero_iscritti > (SELECT c.max_partecipanti\r\n"
					+ "						   FROM corso c JOIN iscrizione i ON c.corso_id=i.corso_scelto\r\n"
					+ "						   WHERE i.corso_scelto=NEW.corso_scelto AND i.studente_iscritto=NEW.studente_iscritto))	\r\n"
					+ "	THEN\r\n"
					+ "		DELETE FROM iscrizione i WHERE i.corso_scelto=NEW.corso_scelto AND i.studente_iscritto=NEW.studente_iscritto;\r\n"
					+ "		RAISE SQLSTATE '12304';\r\n"
					+ "		RAISE EXCEPTION 'Un corso non può avere più iscritti del numero massimo di partecipanti';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_iscrizioni_corso_pieno\r\n"
					+ "AFTER INSERT ON iscrizione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_numero_massimo_partecipanti();\r\n"
					+ "\r\n"
					+ "--Due lezioni dello stesso corso non possono svolgersi contemporaneamente\r\n"
					+ "CREATE FUNCTION check_orario_lezioni_on_insert()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "lezioni_sovrapposte INTEGER;\r\n"
					+ "BEGIN\r\n"
					+ "	SELECT count(*) INTO lezioni_sovrapposte\r\n"
					+ "	FROM lezione l JOIN corso c ON l.del_corso = c.corso_id\r\n"
					+ "	WHERE c.corso_id = NEW.del_corso\r\n"
					+ "		  AND l.data = NEW.data AND (NEW.ora_inizio BETWEEN l.ora_inizio AND l.ora_fine \r\n"
					+ "								     OR NEW.ora_fine BETWEEN l.ora_inizio AND l.ora_fine\r\n"
					+ "								     OR (NEW.ora_inizio < l.ora_inizio AND NEW.ora_fine > l.ora_fine));\r\n"
					+ "							\r\n"
					+ "	IF (lezioni_sovrapposte > 1)\r\n"
					+ "	THEN\r\n"
					+ "		DELETE FROM lezione WHERE lezione.lezione_id = NEW.lezione_id;\r\n"
					+ "		RAISE SQLSTATE '12305';\r\n"
					+ "		RAISE EXCEPTION 'Due lezioni dello stesso corso non possono svolgersi contemporaneamente';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_lezioni_contemporanee_stesso_corso_on_insert\r\n"
					+ "AFTER INSERT ON lezione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_orario_lezioni_on_insert();\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION check_orario_lezioni_on_update()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "lezioni_sovrapposte INTEGER;\r\n"
					+ "BEGIN\r\n"
					+ "	SELECT count(*) INTO lezioni_sovrapposte\r\n"
					+ "	FROM lezione l JOIN corso c ON l.del_corso = c.corso_id\r\n"
					+ "	WHERE c.corso_id = NEW.del_corso\r\n"
					+ "		  AND l.data = NEW.data AND (NEW.ora_inizio BETWEEN l.ora_inizio AND l.ora_fine \r\n"
					+ "								     OR NEW.ora_fine BETWEEN l.ora_inizio AND l.ora_fine\r\n"
					+ "								     OR (NEW.ora_inizio < l.ora_inizio AND NEW.ora_fine > l.ora_fine));\r\n"
					+ "							\r\n"
					+ "	IF (lezioni_sovrapposte > 1)\r\n"
					+ "	THEN\r\n"
					+ "		RAISE SQLSTATE '12306';\r\n"
					+ "		ROLLBACK;\r\n"
					+ "		RAISE EXCEPTION 'Due lezioni dello stesso corso non possono svolgersi contemporaneamente';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_lezioni_contemporanee_stesso_corso_on_update\r\n"
					+ "AFTER UPDATE ON lezione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_orario_lezioni_on_update();\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "--Uno studente non può partecipare a due lezioni (di corsi diversi) che si svolgono nello stesso intervallo di tempo\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION check_orario_partecipazioni()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "lezioni_stesso_intervallo INTEGER;\r\n"
					+ "new_ora_inizio TIME;\r\n"
					+ "new_ora_fine TIME;\r\n"
					+ "new_data DATE;\r\n"
					+ "BEGIN\r\n"
					+ "	SELECT l1.data, l1.ora_inizio, l1.ora_fine INTO new_data, new_ora_inizio, new_ora_fine\r\n"
					+ "	FROM lezione l1\r\n"
					+ "	WHERE l1.lezione_id = NEW.lezione_frequentata;\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "	SELECT count(*) INTO lezioni_stesso_intervallo\r\n"
					+ "	FROM partecipazione p \r\n"
					+ "	WHERE p.studente_partecipante = NEW.studente_partecipante AND \r\n"
					+ "		  p.lezione_frequentata IN (SELECT l.lezione_id\r\n"
					+ "									  FROM lezione l JOIN partecipazione p1 ON l.lezione_id = p1.lezione_frequentata									  \r\n"
					+ "									  WHERE l.data = new_data \r\n"
					+ "											AND\r\n"
					+ "											    (new_ora_inizio BETWEEN l.ora_inizio AND l.ora_fine \r\n"
					+ "												OR new_ora_fine BETWEEN l.ora_inizio AND l.ora_fine\r\n"
					+ "												OR (new_ora_inizio < l.ora_inizio AND new_ora_fine > l.ora_fine)));\r\n"
					+ "										\r\n"
					+ "	IF (lezioni_stesso_intervallo > 1)\r\n"
					+ "	THEN\r\n"
					+ "		DELETE FROM partecipazione p WHERE p.lezione_frequentata = NEW.lezione_frequentata AND\r\n"
					+ "										   p.studente_partecipante = NEW.studente_partecipante;\r\n"
					+ "										   \r\n"
					+ "		RAISE SQLSTATE '12307';								  \r\n"
					+ "		RAISE EXCEPTION 'Uno studente non può partecipare a due lezioni (di corsi diversi) \r\n"
					+ "					  che si svolgono nello stesso intervallo di tempo';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_partecipazioni_contemporanee\r\n"
					+ "AFTER INSERT ON partecipazione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_orario_partecipazioni();\r\n"
					+ "\r\n"
					+ "--L'ora di fine di una lezione deve essere posteriore a quella di inizio\r\n"
					+ "CREATE FUNCTION check_correttezza_orario_lezioni_on_insert()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "BEGIN						\r\n"
					+ "	IF (NEW.ora_inizio>=NEW.ora_fine)\r\n"
					+ "	THEN\r\n"
					+ "		DELETE FROM lezione WHERE lezione.lezione_id = NEW.lezione_id;\r\n"
					+ "		RAISE SQLSTATE '12308';\r\n"
					+ "		RAISE EXCEPTION 'Una lezione non può avere orario di inizio posteriore a quello di fine.';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_orario_illegale_lezioni_on_insert\r\n"
					+ "AFTER INSERT ON lezione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_correttezza_orario_lezioni_on_insert();\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION check_correttezza_orario_lezioni_on_update()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "BEGIN						\r\n"
					+ "	IF (NEW.ora_inizio>=NEW.ora_fine)\r\n"
					+ "	THEN\r\n"
					+ "		RAISE SQLSTATE '12309';\r\n"
					+ "		ROLLBACK;\r\n"
					+ "		RAISE EXCEPTION 'Una lezione non può avere orario di inizio posteriore a quello di fine.';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_orario_illegale_lezioni_on_update\r\n"
					+ "AFTER UPDATE ON lezione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_correttezza_orario_lezioni_on_update();\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "--Quando si modifica un corso, il numero massimo di partecipanti non può diventare minore del numero di iscritti attuale\r\n"
					+ "CREATE FUNCTION check_nuovo_num_max_partecipanti()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "BEGIN						\r\n"
					+ "	IF (NEW.max_partecipanti < (SELECT count(*)\r\n"
					+ "								FROM iscrizione i\r\n"
					+ "								WHERE i.corso_scelto = NEW.corso_id))\r\n"
					+ "	THEN\r\n"
					+ "		RAISE SQLSTATE '12310';\r\n"
					+ "		ROLLBACK;\r\n"
					+ "		RAISE EXCEPTION 'Impossibile diminuire il numero massimo di iscritti al di sotto del numero di iscritti attuale.';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_decremento_num_max_partecipanti\r\n"
					+ "AFTER UPDATE ON corso\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_nuovo_num_max_partecipanti();\r\n"
					+ "\r\n"
					+ "--Un corso non può iniziare prima delle 8:00 e non può finire dopo le 20:00\r\n"
					+ "CREATE FUNCTION check_orario_valido_lezione_on_insert()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "BEGIN						\r\n"
					+ "	IF (NEW.ora_inizio < '8:00' OR NEW.ora_fine > '20:00')\r\n"
					+ "	THEN\r\n"
					+ "		DELETE FROM lezione WHERE (lezione_id = NEW.lezione_id);\r\n"
					+ "		RAISE SQLSTATE '12311';\r\n"
					+ "		RAISE EXCEPTION 'Impossibile creare una lezione che inizi prima delle 8:00 o che finisca dopo le 20:00.';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER solo_orari_consentiti_lezioni_on_insert\r\n"
					+ "AFTER INSERT ON lezione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_orario_valido_lezione_on_insert();\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION check_orario_valido_lezione_on_update()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "BEGIN						\r\n"
					+ "	IF (NEW.ora_inizio < '8:00' OR NEW.ora_fine > '20:00')\r\n"
					+ "	THEN\r\n"
					+ "		RAISE SQLSTATE '12312';\r\n"
					+ "		ROLLBACK;\r\n"
					+ "		RAISE EXCEPTION 'Impossibile creare una lezione che inizi prima delle 8:00 o che finisca dopo le 20:00.';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER solo_orari_consentiti_lezioni_on_update\r\n"
					+ "AFTER UPDATE ON lezione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_orario_valido_lezione_on_update();\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "--Una lezione può durare al massimo due ore\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION check_durata_massima_lezioni_on_insert()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "BEGIN						\r\n"
					+ "	IF ((SELECT calcolo_durata_lezione(NEW.ora_inizio, NEW.ora_fine)) > '2:00:00')\r\n"
					+ "	THEN\r\n"
					+ "		DELETE FROM lezione WHERE lezione.lezione_id = NEW.lezione_id;\r\n"
					+ "		RAISE SQLSTATE '12313';\r\n"
					+ "		RAISE EXCEPTION 'Una lezione non può durare più di due ore.';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_lezioni_più_di2ore_on_insert\r\n"
					+ "AFTER INSERT ON lezione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_durata_massima_lezioni_on_insert();\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION check_durata_massima_lezioni_on_update()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "BEGIN						\r\n"
					+ "	IF ((SELECT calcolo_durata_lezione(NEW.ora_inizio, NEW.ora_fine)) > '2:00:00')\r\n"
					+ "	THEN\r\n"
					+ "		RAISE SQLSTATE '12314';\r\n"
					+ "		ROLLBACK;\r\n"
					+ "		RAISE EXCEPTION 'Una lezione non può durare più di due ore.';\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER no_lezioni_più_di2ore_on_update\r\n"
					+ "AFTER UPDATE ON lezione\r\n"
					+ "FOR EACH ROW\r\n"
					+ "EXECUTE PROCEDURE check_durata_massima_lezioni_on_update();\r\n"
					+ "");
			
			statement.executeUpdate("\r\n"
					+ "--Calcolo durata lezione\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION calcolo_durata_lezione(inizio TIME, fine TIME) \r\n"
					+ "RETURNS INTERVAL AS\r\n"
					+ "$$\r\n"
					+ "BEGIN\r\n"
					+ "	RETURN fine - inizio;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "--Calcolo Statistiche numero minimo e massimo di presenze\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION calcolo_statistiche_min_presenze(nome_corso VARCHAR)\r\n"
					+ "RETURNS INTEGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "	ret INTEGER;\r\n"
					+ "BEGIN\r\n"
					+ "	SELECT min(p1.conteggio) INTO ret\r\n"
					+ "	FROM presenze p1 JOIN corso c1 ON p1.corso_id = c1.corso_id\r\n"
					+ "	WHERE c1.nome = nome_corso\r\n"
					+ "	GROUP BY c1.corso_id;\r\n"
					+ "	\r\n"
					+ "	RETURN ret;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION calcolo_statistiche_max_presenze(nome_corso VARCHAR)\r\n"
					+ "RETURNS INTEGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "	ret INTEGER;\r\n"
					+ "BEGIN\r\n"
					+ "	SELECT max(p1.conteggio) INTO ret\r\n"
					+ "	FROM presenze p1 JOIN corso c1 ON p1.corso_id = c1.corso_id\r\n"
					+ "	WHERE c1.nome = nome_corso\r\n"
					+ "	GROUP BY c1.corso_id;\r\n"
					+ "	\r\n"
					+ "	RETURN ret;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "--Calcolo Statistiche numero medio di presenze\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION calcolo_statistiche_media_presenze(nome_corso VARCHAR)\r\n"
					+ "RETURNS INTEGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE \r\n"
					+ "    num_lezioni INTEGER;\r\n"
					+ "    somma_presenze_corso INTEGER;\r\n"
					+ "    risultato INTEGER;\r\n"
					+ "    \r\n"
					+ "BEGIN\r\n"
					+ "    SELECT SUM(conteggio) INTO somma_presenze_corso \r\n"
					+ "    FROM presenze p \r\n"
					+ "    WHERE p.corso_id = (SELECT c.corso_id \r\n"
					+ "					    FROM corso c \r\n"
					+ "						WHERE c.nome = nome_corso);\r\n"
					+ "                        \r\n"
					+ "    SELECT COUNT(*) INTO num_lezioni     \r\n"
					+ "    FROM lezione l \r\n"
					+ "    WHERE l.del_corso = (SELECT c.corso_id \r\n"
					+ "					    FROM corso c \r\n"
					+ "						WHERE c.nome = nome_corso);\r\n"
					+ "          \r\n"
					+ "   risultato := (somma_presenze_corso/num_lezioni);  \r\n"
					+ "          \r\n"
					+ "   RETURN risultato;\r\n"
					+ "   \r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "--Calcolo percentuale riempimento media\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION calcolo_percentuale_riempimento_media(nome_corso VARCHAR)\r\n"
					+ "RETURNS INTEGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "	max_partecipanti INTEGER;\r\n"
					+ "	ret INTEGER;\r\n"
					+ "BEGIN\r\n"
					+ "\r\n"
					+ "	SELECT c.max_partecipanti INTO max_partecipanti\r\n"
					+ "	FROM corso c \r\n"
					+ "	WHERE c.nome = nome_corso;\r\n"
					+ "	\r\n"
					+ "	IF max_partecipanti= '0' THEN ret := '100';\r\n"
					+ "	ELSE\r\n"
					+ "		ret := calcolo_statistiche_media_presenze(nome_corso);\r\n"
					+ "		ret := ret*'100';\r\n"
					+ "		ret := ret/max_partecipanti;\r\n"
					+ "				\r\n"
					+ "	END IF;\r\n"
					+ "	RETURN ret;\r\n"
					+ "END;\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "--TRIGGER: Il corso viene superato dallo studente se il corso è terminato \r\n"
					+ "--e ha raggiunto la percentuale minima di presenze\r\n"
					+ "\r\n"
					+ "CREATE FUNCTION calcolo_superamento_corso()\r\n"
					+ "RETURNS TRIGGER AS\r\n"
					+ "$$\r\n"
					+ "DECLARE\r\n"
					+ "lezioni_totali INTEGER;\r\n"
					+ "presenze INTEGER;\r\n"
					+ "percentuale FLOAT;\r\n"
					+ "cursore CURSOR IS (SELECT *\r\n"
					+ "			  FROM iscrizione i\r\n"
					+ "			  WHERE i.corso_scelto = NEW.corso_id);\r\n"
					+ "BEGIN\r\n"
					+ "	FOR S IN cursore\r\n"
					+ "	LOOP\r\n"
					+ "        lezioni_totali := '0';\r\n"
					+ "        presenze := '0';\r\n"
					+ "        percentuale := '0';\r\n"
					+ "		SELECT count(*) INTO presenze\r\n"
					+ "		FROM partecipazione p JOIN lezione l ON p.lezione_frequentata = l.lezione_id\r\n"
					+ "		WHERE l.del_corso = S.corso_scelto AND p.studente_partecipante = S.studente_iscritto;\r\n"
					+ "		\r\n"
					+ "		SELECT count(*) INTO lezioni_totali\r\n"
					+ "		FROM lezione l\r\n"
					+ "		WHERE l.del_corso = S.corso_scelto;\r\n"
					+ "		\r\n"
					+ "		IF(lezioni_totali<>0)\r\n"
					+ "        THEN \r\n"
					+ "		percentuale := FLOOR((presenze*100)/lezioni_totali);\r\n"
					+ "		END IF;\r\n"
					+ "		\r\n"
					+ "		UPDATE iscrizione\r\n"
					+ "		SET superato = TRUE\r\n"
					+ "		WHERE studente_iscritto = S.studente_iscritto AND\r\n"
					+ "			  corso_scelto = S.corso_scelto AND\r\n"
					+ "			  percentuale >= (SELECT c.percentuale_minima_presenze\r\n"
					+ "							  FROM corso c\r\n"
					+ "							  WHERE c.corso_id = S.corso_scelto);\r\n"
					+ "	END LOOP;\r\n"
					+ "	RETURN NEW;\r\n"
					+ "END;\r\n"
					+ "\r\n"
					+ "$$ LANGUAGE plpgsql;\r\n"
					+ "\r\n"
					+ "CREATE TRIGGER su_terminazione_corso\r\n"
					+ "AFTER UPDATE ON corso\r\n"
					+ "FOR EACH ROW\r\n"
					+ "WHEN (OLD.terminato = FALSE AND NEW.terminato = TRUE)\r\n"
					+ "EXECUTE PROCEDURE calcolo_superamento_corso();\r\n"
					+ "");
			
			
			System.out.println("new db connessione effettuata");

		} catch (SQLException e1) {
			e1.printStackTrace();
		}
	}
}
